#include <windows.h>#include <GL/glut.h>#include <iostream>#include <math.h>using namespace std;struct Point{ float x; float y;};Point top_left = {.x=0, .y=600};Point top_right = {.x=1000, .y=600};Point bottom_left = {.x=0, .y=0};Point bottom_right = {.x=1000, .y=0};Point top_gap = {.x=0, .y=70};Point bottom_gap = {.x=0, .y=10};int state = 0;float displayRate = 1000/60;const double PI = atan(1) * 4;class Bar{    public:        Point bar_size;        float position_left;        float position_right;        float position_bottom;        float position_top;        Bar(int x,int y){            bar_size.x = x;            bar_size.y = y;            position_left = (bottom_left.x/2)-(bar_size.x/2);            position_right = position_left+bar_size.x;            position_bottom = bottom_left.y+bottom_gap.y;            position_top = bottom_left.y+bottom_gap.y+bar_size.y;        }        void draw(){            glBegin(GL_POLYGON);                glColor3f(1.0f, 0.0f, 0.0f);                glVertex2f(position_left, position_bottom);                glVertex2f(position_right, position_bottom);                glVertex2f(position_right, position_top);                glVertex2f(position_left, position_top);            glEnd();        }        void update(int x){            float new_left = x-(bar_size.x/2);            float new_right = x+(bar_size.x/2);            if(new_left>=bottom_left.x && new_right<=bottom_right.x){                position_left = new_left;                position_right = new_right;            }        }};Bar bar = Bar(200,20);class Ball{    public:        float cx;        float cy;        float r;        float speed;        float angle;        Point direction;        Ball(int rr){            cx = 500;            cy = bottom_gap.y+bar.bar_size.y;            r = rr;            speed = 5;            angle = 20;            direction.x = -1;            direction.y = 1;        }        void draw(){            int triangleAmount = 100;            glBegin(GL_TRIANGLE_FAN);                glVertex2f(cx, cy);                for(int i = 0; i <= triangleAmount;i++){                    float theta = i *  2 * PI / triangleAmount;                    glVertex2f(                        cx + (r * cos(theta)),                        cy + (r * sin(theta))                    );                }            glEnd();        }        void update(int x, int y){            if(cx+r>=bottom_right.x){ //right wall bounce                direction.x = direction.x*-1;            }            if(cx-r<=bottom_left.x){ //left wall bounce                direction.x = direction.x*-1;            }            if(cy+r>=top_right.y-top_gap.y){ //top wall bounce                direction.y = direction.y*-1;            }            if(cy+r<=bottom_right.y){ //bottom wall bounce                direction.y = direction.y*-1;            }            float angle_difference = 0;            if(cy-r<=bar.position_top){                if(cx+r>=bar.position_left && cx-r<=bar.position_right){ //top bar bounce                    direction.y = direction.y*-1;                    if(cx+r<(bar.position_left+(bar.bar_size.x/2))){ //left side bar bounce                        if(direction.x==1){                            direction.x = direction.x*-1;                        }                        angle_difference = (((bar.position_left+(bar.bar_size.x/2))-cx+r)/5);                        if(cx+r<bar.position_left+((bar.bar_size.x/4))){ //1st part                            if(angle-angle_difference>=10){                                angle -= angle_difference;                            }else{                                angle = 10;                            }                        }else{ //2nd part                            if(angle+angle_difference<90){                                angle += angle_difference;                            }else{                                angle = 90;                            }                        }                        cout<<"\tNow = "<<angle<<endl;                    }else{ //right side bar bounce                        if(direction.x==-1){                            direction.x = direction.x*-1;                        }                        angle_difference = (((cx-r)-(bar.position_left+(bar.bar_size.x/2)))/5);                        if(cx+r<bar.position_left+((bar.bar_size.x/4)*3)){//3rd part                            if(angle+angle_difference<90){                                angle += angle_difference;                            }else{                                angle = 90;                            }                        }else{ //4th part                            if(angle-angle_difference>=10){                                angle -= angle_difference;                            }else{                                angle = 10;                            }                        }                    }                }            }            //if(angle-angle_difference>=10){            //    angle -= angle_difference;            //}            //angle = 90-angle_difference-angle;            float theta = (angle*PI)/180;            cx += speed*cos(theta)*direction.x;            cy += speed*sin(theta)*direction.y;        }};Ball ball = Ball(8);void display(){    glClear(GL_COLOR_BUFFER_BIT);    glLoadIdentity();    glBegin(GL_POLYGON);        glColor3f(1.0f, 0.0f, 0.0f);        glVertex2f(top_left.x, top_left.y-top_gap.y);        glVertex2f(top_right.x, top_right.y-top_gap.y);        glVertex2f(top_right.x, top_right.y);        glVertex2f(top_left.x, top_left.y);    glEnd();    bar.draw();    ball.draw();    glutSwapBuffers();}void timer(int){    glutPostRedisplay();    glutTimerFunc(displayRate,timer,0);    ball.update(0,0);}void handleMouse(int x, int y) {	bar.update(x);	glutPostRedisplay();}void reshape(int w,int h){    glViewport(0,0,(GLsizei)w,(GLsizei)h);    glMatrixMode(GL_PROJECTION);    glLoadIdentity();    gluOrtho2D(bottom_left.x, top_right.x, bottom_left.y, top_right.y);    glMatrixMode(GL_MODELVIEW);}int main(int argc, char** argv){    glutInit(&argc, argv);    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);    glutInitWindowSize(top_right.x, top_right.y);    glutInitWindowPosition(100, 150);    glutCreateWindow("Breakout Game");    glutDisplayFunc(display);    glutReshapeFunc(reshape);    glutPassiveMotionFunc(handleMouse);    glClearColor(1.0, 1.0, 1.0, 0.0); //white    glutTimerFunc(0,timer,0);    glutMainLoop();    return 0;}